# Generated by Django 3.2.10 on 2022-01-18 14:04

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('users', '0001_initial'), ('users', '0002_user_name'), ('users', '0003_auto_20220118_2042'), ('users', '0004_remove_user_nickname'), ('users', '0005_alter_user_random_name'), ('users', '0006_user_nickname'), ('users', '0007_alter_user_random_name')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('random_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='random name')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='profile')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='user IP')),
                ('neis_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='NEIS email address')),
                ('is_verify', models.BooleanField(default=False, verbose_name='NEIS email verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('nickname', models.CharField(default='teameet', max_length=150, unique=True, verbose_name='nickname')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
